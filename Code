import json
import argparse
import matplotlib.pyplot as plt

class Demographic:
    def __init__(self, filename):
        self.demographics = self.load_demographics(filename)

    def load_demographics(self, filename):
        try:
            with open(filename, "r") as file:
                return json.load(file)
        except FileNotFoundError:
            print(f"Error: File {filename} not found.")
            return {}
        except json.JSONDecodeError:
            print(f"Error: File {filename} is not a valid JSON file.")
            return {}

    def filter_locations(self, target_age_range=None, target_income_range=None, min_employed_percentage=None):
        if not any([target_age_range, target_income_range, min_employed_percentage]):
            return list(self.demographics.keys())

        return [
            location for location, info in self.demographics.items()
            if (target_age_range is None or int(info["age"]) in target_age_range) and
               (target_income_range is None or int(info["income"]) in target_income_range) and
               (min_employed_percentage is None or (info["employedpopulation"] / info["population"]) * 100 >= min_employed_percentage)
        ]
        
class Ranker:
   def __init__(self):
       self.locations = []

   def add_location(self, location_name, ad_cost, foottraffic, employedpopulation, population):
       audience_reach = self.audience_reach(foottraffic, employedpopulation, population)
       cost_efficiency_score = self.cost_efficiency_score(audience_reach, ad_cost)

       self.locations.append({
           "location_name": location_name,
           "ad_cost": ad_cost,
           "audience_reach": audience_reach,
           "cost_efficiency_score": cost_efficiency_score
       })

   def audience_reach(self, foottraffic, employedpopulation, population):
       return round(foottraffic * (employedpopulation / population))

   def cost_efficiency_score(self, audience_reach, ad_cost):
       if ad_cost == 0:
           return 0
       return audience_reach / ad_cost

   def rank_locations(self, top_num=24):
       return sorted(self.locations, key=lambda loc: loc["cost_efficiency_score"], reverse=True)[:top_num]
   
   def get_average(self, demographics, filtered_locations):
    if not filtered_locations:
        print("No filtered locations provided.")
        return {"age": 0, "income": 0, "employedpercentage": 0}

    total_age = sum([demographics[loc]["age"] for loc in filtered_locations])
    total_income = sum([demographics[loc]["income"] for loc in filtered_locations])
    total_employed_percentage = sum([
        (demographics[loc]["employedpopulation"] / demographics[loc]["population"]) * 100
        for loc in filtered_locations
    ])

    count = len(filtered_locations)

    return {
        "age": total_age / count,
        "income": total_income / count,
        "employedpercentage": total_employed_percentage / count
    }

class Budget:
   def __init__(self, total_budget, top_locations):
       self.total_budget = total_budget
       self.top_locations = top_locations

   def allocate_budget(self):
       total_efficiency_score = sum([loc["cost_efficiency_score"] for loc in self.top_locations])
       if total_efficiency_score == 0:
           print("Error: No valid cost efficiency score. Cannot allocate budget.")
           return
       for loc in self.top_locations:
           loc["allocated_budget"] = (loc["cost_efficiency_score"] / total_efficiency_score) * self.total_budget

   def adjust_budget_allocation(self, location_name, new_budget):
       for loc in self.top_locations:
           if loc["location_name"] == location_name:
               loc["allocated_budget"] = new_budget

   def optimal_spending(self):
       for loc in self.top_locations:
           loc["optimal_spending"] = loc["allocated_budget"]

   def track_spending(self):
       total_spent = sum([loc["allocated_budget"] for loc in self.top_locations])
       remaining_budget = self.total_budget - total_spent
       print("\nBudget Allocation:")
       print(f"Total Budget: ${self.total_budget:.2f}")
       for loc in self.top_locations:
           print(f"{loc['location_name']}: Allocated Budget: ${loc['allocated_budget']:.2f}")
       print(f"Remaining Budget: ${remaining_budget:.2f}")
       
class UserInterface:
    def __init__(self):
        self.args = self.parse_args()

    def parse_args(self):
        def parse_range(value):
            try:
                start, end = map(int, value.split('-'))
                if start > end:
                    raise argparse.ArgumentTypeError(f"Invalid range: {value}")
                return range(start, end + 1)
            except ValueError:
                raise argparse.ArgumentTypeError(f"Invalid range format: {value}")

        parser = argparse.ArgumentParser(description="Strategic Advertising Placement Tool")
        parser.add_argument("--budget", type=int, required=True, help="Total advertising budget")
        parser.add_argument("--age", type=parse_range, help="Target age range (e.g., 25-35)")
        parser.add_argument("--income", type=parse_range, help="Target income range (e.g., 50000-80000)")
        parser.add_argument("--employedpercentage", type=float, help="Minimum employed population percentage (optional)")
        parser.add_argument("--top_num", type=int, default=24, help="Number of top locations to display")
        parser.add_argument("--demographics", type=str, default="demographics.json", help="Demographics data file")
        return parser.parse_args()
    
    def check_budget(self, budget):
        if isinstance(budget, str):
            budget = budget.strip().replace(",", "")
            try:
                budget = float(budget)
            except ValueError:
                raise ValueError(f"Invalid budget format: '{budget}'. Please enter a valid numeric value.")

        if not isinstance(budget, (int, float)) or budget <= 0:
            raise ValueError("Budget must be a positive number.")

        return True
    
    def run(self):
        self.check_budget(self.args.budget)
        
        analyzer = Demographic(self.args.demographics)

        target_age_range = self.args.age
        target_income_range = self.args.income
        min_employed_percentage = self.args.employedpercentage

        filtered_locations = analyzer.filter_locations(
            target_age_range=target_age_range,
            target_income_range=target_income_range,
            min_employed_percentage=min_employed_percentage
        )

        ranker = Ranker()
        for location in filtered_locations:
            data = analyzer.demographics[location]
            ranker.add_location(
                location_name=location,
                ad_cost=data["ad_cost"],
                foottraffic=data["foottraffic"],
                employedpopulation=data["employedpopulation"],
                population=data["population"],
            )

        top_locations = ranker.rank_locations(self.args.top_num)
        self.display_results(top_locations)

        averages = ranker.get_average(analyzer.demographics, filtered_locations)

        print(f"\nThe average age for the selected locations is: {averages['age']:.2f} years")
        print(f"The average income for the selected locations is: ${averages['income']:.2f}")
        print(f"The average employed percentage for the selected locations is: {averages['employedpercentage']:.2f}%")

        budget_optimizer = Budget(self.args.budget, top_locations)
        budget_optimizer.allocate_budget()
        budget_optimizer.optimal_spending()
        budget_optimizer.track_spending()

        self.display_bar_chart(top_locations)
        self.save_results_to_file(top_locations, budget_optimizer, averages)

    def display_results(self, top_locations):
       print("Top Advertising Locations:\n")
       for loc in top_locations:
           print(f"Location: {loc['location_name']}, "
                 f"Cost Efficiency Score: {loc['cost_efficiency_score']:.2f}, "
                 f"Audience Reach: {loc['audience_reach']:.2f}")

    def display_bar_chart(self, top_locations):
       sorted_locations = sorted(top_locations, key=lambda loc: loc["cost_efficiency_score"], reverse=True)
       locations
